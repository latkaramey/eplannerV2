import { Component, OnInit, ViewChild, ElementRef, ViewEncapsulation } from '@angular/core';
import "dhtmlx-gantt";
import { LinkService } from 'src/app/services/link.service';
import { Task } from 'src/app/models/task.model';
import { Link } from 'src/app/models/link.model';
import { TaskService } from 'src/app/services/task.service';
import { BasePage } from 'src/app/base.page';
import { Title } from '@angular/platform-browser';
import { forkJoin } from 'rxjs';
import { MENUID } from 'src/app/models/gantt.menu.enum';
import { ResourceService } from 'src/app/services/resource.service';
import { GANTT_CONFIG } from 'src/app/models/gantt.config';
import { Department } from 'src/app/models/department.model';
import { Staff } from 'src/app/models/staff.model';
declare let gantt: any;


@Component({
  encapsulation: ViewEncapsulation.None,
	selector: 'gantt',
  styleUrls: ['./view-gantt-charts.component.css'],
  templateUrl: './view-gantt-charts.component.html'
	//template: `<div #gantt_here class='gantt-chart'></div>`,
})
export class ViewGanttChartsComponent extends BasePage implements OnInit {

  @ViewChild("gantt_here") ganttContainer: ElementRef;

  constructor(private title : Title, private taskService: TaskService,
    private linkService: LinkService, private resourceService : ResourceService) { 
      super(title);
      super.setTitle("Schedules");
      
  }

  ngOnInit() {
        // Work Hous and Format of duration calculation
        this.durationConfig();
        
        this.configLightBox();
        // Config : Staff and resource data for Gantt view
        this.resourceList();
        this.resourceTaskSetting();

        gantt.plugins(GANTT_CONFIG.PLUGINS_CONFIG);
        this.addDateMarker();

        //this.showOwnerTimeScale();
        this.timelineScale();

        gantt.ext.zoom.init(GANTT_CONFIG.ZOOM_CONFIG);
        this.configGanttColums();
        this.cssWorkOffColHeaders();
        this.cssWorkOffColumns();
        this.calendarConfig();

        // On start hide Parent column : default view :Gantt
        gantt.getGridColumn("parent").hide = true;

        if (sessionStorage.getItem('role') === 'ROLE_USER')
        {
            gantt.config.readonly = true;
        }
        gantt.init(this.ganttContainer.nativeElement);

        const dp = this.buildDP();

        let tasks : Task[] = [];
        let links : Link[] = [];
        const values$ = forkJoin(
            this.taskService.getGanttTasks(),this.linkService.getLinks()
        ); 
        values$.subscribe((data) =>{
            tasks = data[0];
            links = data[1];
            gantt.parse({tasks,links});
        });
    }

    /**
     * Handle Menu Icon click
     * @param id : Menu Identifier
     */
    private handleMenuClick(id: number) {
     switch (id) {
        case MENUID.ZOOMIN:
            console.log("Destination reached with id:" + id);
            gantt.ext.zoom.zoomIn();
            break;

        case MENUID.ZOOMOUT:
            console.log("Destination reached with id:" + id);
            gantt.ext.zoom.zoomOut();
            break;
        case MENUID.WORK_OFF:
            console.log("Destination reached with id:" + id);
            if (gantt.config.skip_off_time) {
                gantt.config.skip_off_time = false;
            } else {
                gantt.config.skip_off_time = true;
            }
            gantt.render();
            break;

        case MENUID.GANTT_ONLY:
            gantt.getGridColumn("owner").hide = false;
            gantt.getGridColumn("parent").hide = true;
            gantt.groupBy(false);
            gantt.config.layout = GANTT_CONFIG.GANTT_ONLY_LAYOUT;
            gantt.init(this.ganttContainer.nativeElement);
            break;

        case MENUID.RESOURCE_ONLY:
            break;

        case MENUID.BOTH_LAYOUT:
            gantt.getGridColumn("owner").hide = true;
            gantt.getGridColumn("parent").hide = false;
            this.showGroups();
            break;

      }
      return false;
  }

    /**
     * Resurce view: CSS
     */
    private resourceTaskSetting() {
        gantt.templates.grid_row_class = gantt.templates.task_row_class = function (start, end, task) {
            if (task.$virtual)
                return "summary-row"
        };
        gantt.templates.task_class = function (start, end, task) {
            if (task.$virtual)
                return "summary-bar";
        };
    }

    /**
     * Resource list combination
     * @param people 
     * @param departments 
     */
    private combineLists(people, departments) {
        var result = [];
        departments.forEach(function (d) {
            var clone = gantt.copy(d);
            clone.key = "department_" + d.key;
            result.push(clone);
        });

        people.forEach(function (p) {
            var clone = gantt.copy(p);
            clone.owner_id = "department_" + p.department;
            result.push(clone);
        });
        return result;
    }

    /**
     * Resource view render
     */
    private showGroups() {
        var people = gantt.serverList("people"),
            departmnents = gantt.serverList("departments");

        gantt.groupBy({
            groups: this.combineLists(people, departmnents),
            relation_property: "owner_id",
            group_id: "key",
            group_text: "label",
        })

    }

    /**
     * Configure Gantt Columns
     */
    private configGanttColums() {
        gantt.config.open_tree_initially = true;
        function byId(list, id) {
            for (var i = 0; i < list.length; i++) {
                if (list[i].key == id)
                    return list[i].label || "";
            }
            return "";
        }

        const formatter = this.durationConfig()

        gantt.config.columns = [

            { name: "text", tree: true, width: 200, resize: true },
            { name: "start_date", align: "center", width: 80, resize: true },
            {
                name: "owner", width: 80, label: "Owner", align: "center", template: function (item) {
                    if (item.type == gantt.config.types.project) return ""
                    return byId(gantt.serverList('people'), item.owner_id)
                }
            },

            {
                name: "parent", width: 80, label: "Parent", align: "center", template: function (item) {
                    if (item.type == gantt.config.types.project) return ""
                    return gantt.getTask(item.parent).text;
                }
            },
            {
                name: "duration", width: 60, align: "center", template: function (task) {
                    return formatter.format(task.duration);
                }
            },
            { name: "add", width: 44 }
        ];
    }

    /**
     * Display vertical bar as a marker on today's date.
     */
    private addDateMarker() {
        gantt.plugins({
            marker: true
        });

        var currentDate: any;
        var id = gantt.addMarker({
            start_date: new Date(2020, 1, 10),
            css: "marker_line",
            text: "Marker"
        });

        var dragObject = {};
        var elem: HTMLInputElement;
        document.onmousedown = function (e ) {
        // elem = (<HTMLInputElement> e.target).closest('.marker_line');
        //     if (e.which != 1 || !elem)
        //         return;
            //dragObject.elem =(<HTMLInputElement>elem);
        }

        document.onmousemove = function (e) {
            if (!elem) return;
            var position = e.clientX - gantt.config.grid_width + gantt.getScrollState().x;
            currentDate = gantt.dateFromPos(position);
        }

        document.onmouseup = function (e) {
            dragObject = {};
        }

        setInterval(function () {
            var today = gantt.getMarker(id);
            if (currentDate)
                today.start_date = currentDate;
            gantt.updateMarker(id);
        }, 10);
    }

    /**
     * Build Resource List
     */

    private resourceList() {
         let depts : Department[] = [];
         let staff : Staff[] = [];
         const values$ = forkJoin(
             this.resourceService.getDepartments(),
             this.resourceService.getStaff()
         );

         values$.subscribe((data) => {
             depts = data[0];
             staff = data[1];
             console.log("Departments = "+depts);
             console.log("Staff = "+staff);
             gantt.serverList("departments",depts);
             gantt.serverList("people",staff);  
         })
         /*gantt.serverList("departments",depts);
         gantt.serverList("people",[{"key":5,"label":"C31","department":1},
            {"key":6,"label":"C52","department":2},{"key":7,"label":"C33","department":1},
            {"key":8,"label":"C32","department":1},{"key":9,"label":"M1","department":4},
            {"key":10,"label":"T01","department":3},{"key":11,"label":"M2","department":4},
            {"key":12,"label":"T02","department":3},{"key":13,"label":"C51","department":2}]);*/
    }

    /**
     *  Workday and resource calendar
     */
    private calendarConfig() {
        let standardCal = gantt.addCalendar(GANTT_CONFIG.STD_CALENDAR_CONFIG);
        let qualityCal = gantt.addCalendar(GANTT_CONFIG.QUALITY_CALENDAR_CONFIG);

        gantt.config.resource_property = "staff";
        gantt.config.resource_calendars = {
            5: standardCal,
            6: standardCal,
            7: standardCal,
            8: standardCal,
            9: standardCal,
            12: standardCal,
            13: standardCal,
            10: qualityCal,
            11: qualityCal
        };

        gantt.templates.timeline_cell_class = function (task, date) {
            if (!gantt.isWorkTime({ date: date, task: task }))
                return "week_end";
            return "";
        };

        gantt.templates.timeline_cell_class = function (task, date) {
            if (!gantt.isWorkTime(date, 'hour')) {
                return ("no_work_hour");
            }

            return "";
        };
    }

    /**
     * Lightbox/Dialog box to set task information.
     */
    private configLightBox() {
        gantt.locale.labels.section_owner = "Owner";
        gantt.config.lightbox.sections = [
            //Project Name
            { name: "description", height: 38, map_to: "text", type: "textarea", focus: true },
            // Task type: Project/Task
            { name: "type", type: "typeselect", map_to: "type" },
            // Duration config: Format : Date and time
            { name: "time", type: "duration", map_to: "auto", time_format: ["%d", "%m", "%Y", "%H:%i"] },
            // Resource : Map-To owner_id=> refered as id for task data format
            { name: "owner", height: 30, map_to: "owner_id", type: "select", options: gantt.serverList("people") },
        ];
        this.resourceService.getStaff().subscribe(staff => {
            console.log("Configg Light Box = "+staff);
            gantt.updateCollection("people",staff);
        })
    }

    /**
     * Date and time scale.
     */
    private timelineScale() {
        gantt.config.auto_scheduling = true;
        gantt.config.auto_scheduling_strict = true;
        gantt.config.min_column_width = 20;
        gantt.config.row_height = 20;
        gantt.config.work_time = true;
        gantt.config.correct_work_time = true;
        gantt.setWorkTime({ hours: ["6:00-24:00"] });
        gantt.setWorkTime({ day: 6, hours: [6, 24] });

        gantt.config.scales = GANTT_CONFIG.TIMELINE_SCALES
    }

    /**
     * Duration configuration: Formats duration presentation
     */
    private durationConfig() {
        gantt.config.duration_unit = "hour";//an hour
        return gantt.ext.formatters.durationFormatter(GANTT_CONFIG.DURATION_FORMATTER);
    }

    /**
     * Highlight weekend columns on Gantt.
     */
    private cssWorkOffColumns() {
        gantt.templates.timeline_cell_class = function (task: any, date: any) {
            if (!gantt.isWorkTime({ task: task, date: date })) {
                return "weekend";
            }
        }
    }

    /**
     * Highlight weekend header on on  time scale
     */
    private cssWorkOffColHeaders() {
        gantt.templates.scale_cell_class = function (date: { getDay: () => number; }) {
            if (date.getDay() == 0 || date.getDay() == 6) {
                return "weekend";
            }
        };
    }


    /**
     * Data processor.
     */
    private buildDP() {
        gantt.createDataProcessor({
            task: {
                //update: (data: Task) => this.taskService.update(data),
                create: (data: Task) => this.taskService.insert(data)
                //delete: (id: number) => this.taskService.remove(id)
            }
        });
    }
}
