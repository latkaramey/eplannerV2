import { Component, ElementRef, OnInit, ViewChild } from "@angular/core";
import { Subscription } from 'rxjs';
import { SharedService, MENUID } from '../services/shared.service';

import "dhtmlx-gantt";
import { Task } from '../models/task';
import { TaskService } from '../services/task.service';
import { LinkService } from '../services/link.service';
import { Link } from '../models/link';
import { Resource } from '../models/resource';
import { ResourceService } from '../services/resource.service';

declare let gantt: any;

@Component({
    selector: "gantt",
    styleUrls: ['./gantt.component.css'],
    template: "<div #gantt_here style='width: 100%; height: 100%;'></div>",
})


export class GanttComponent implements OnInit {

    clickEventsubscription: Subscription;
    cssUrl: string;
    resource_chart = true;
    reourceView = false;
    formatter: any;

    @ViewChild("gantt_here", { static: true }) ganttContainer: ElementRef;

    /**
     * Constructor 
     * @param taskService : List of Task Data
     * @param linkService  : List of task dependencies
     * @param sharedService : Shared service as a event emitter
     */
    constructor(private taskService: TaskService,
        private linkService: LinkService,
        private resourceService: ResourceService,
        private sharedService: SharedService) {
        this.clickEventsubscription = this.sharedService.getClickEvent().subscribe(id => {
            this.handleMenuClick(id);
        })
    }

    /**
     * Handle Menu Icon click
     * @param id : Menu Identifier
     */
    private handleMenuClick(id: number) {
        switch (id) {
            case MENUID.MAREKER:
                //console.log("Destination reached with id:" + id);
                if (gantt.config.show_markers) {
                    gantt.config.show_markers = false;
                    gantt.renderMarkers();
                } else {
                    gantt.config.show_markers = true;
                    gantt.renderMarkers();
                }
                break;

            case MENUID.ZOOMIN:
                console.log("Destination reached with id:" + id);
                gantt.ext.zoom.zoomIn();
                break;

            case MENUID.ZOOMOUT:
                console.log("Destination reached with id:" + id);
                gantt.ext.zoom.zoomOut();
                break;
            case MENUID.WORK_OFF:
                console.log("Destination reached with id:" + id);
                if (gantt.config.skip_off_time) {
                    gantt.config.skip_off_time = false;
                } else {
                    gantt.config.skip_off_time = true;
                }
                gantt.render();
                break;

            case MENUID.GANTT_ONLY:
                gantt.getGridColumn("owner").hide = false;
                gantt.getGridColumn("parent").hide = true;
                gantt.groupBy(false);
                gantt.config.layout = this.gantt_only_layout;
                gantt.init(this.ganttContainer.nativeElement);
                break;

            case MENUID.RESOURCE_ONLY:
                break;

            case MENUID.BOTH_LAYOUT:
                gantt.getGridColumn("owner").hide = true;
                gantt.getGridColumn("parent").hide = false;
                this.showGroups();
                break;

        }
    }

    /**
     * Resurce view: CSS
     */
    private resourceTaskSetting() {
        gantt.templates.grid_row_class = gantt.templates.task_row_class = function (start, end, task) {
            if (task.$virtual)
                return "summary-row"
        };
        gantt.templates.task_class = function (start, end, task) {
            if (task.$virtual)
                return "summary-bar";
        };
    }

    /**
     * Resource list combination
     * @param people 
     * @param departments 
     */
    private combineLists(people, departments) {
        var result = [];
        departments.forEach(function (d) {
            var clone = gantt.copy(d);
            clone.key = "department_" + d.key;
            result.push(clone);
        });

        people.forEach(function (p) {
            var clone = gantt.copy(p);
            clone.owner_id = "department_" + p.department;
            result.push(clone);
        });
        return result;
    }

    /**
     * Resource view render
     */
    private showGroups() {
        var people = gantt.serverList("people"),
            departmnents = gantt.serverList("departments");

        gantt.groupBy({
            groups: this.combineLists(people, departmnents),
            relation_property: "owner_id",
            group_id: "key",
            group_text: "label",
        })

    }

    /**
     * Configure Gantt Columns
     */
    private configGanttColums() {
        gantt.config.open_tree_initially = true;
        function byId(list, id) {
            for (var i = 0; i < list.length; i++) {
                if (list[i].key == id)
                    return list[i].label || "";
            }
            return "";
        }

        const formatter = this.durationConfig()

        gantt.config.columns = [

            { name: "text", tree: true, width: 200, resize: true },
            { name: "start_date", align: "center", width: 80, resize: true },
            {
                name: "owner", width: 80, label: "Owner", align: "center", template: function (item) {
                    if (item.type == gantt.config.types.project) return ""
                    return byId(gantt.serverList('people'), item.owner_id)
                }
            },

            {
                name: "parent", width: 80, label: "Parent", align: "center", template: function (item) {
                    if (item.type == gantt.config.types.project) return ""
                    return gantt.getTask(item.parent).text;
                }
            },
            {
                name: "duration", width: 60, align: "center", template: function (task) {
                    return formatter.format(task.duration);
                }
            },
            { name: "add", width: 44 }
        ];
    }


    /**
     * By defualt Gantt layout
     */
    private gantt_only_layout = {
        css: "gantt_container",
        rows: [
            {
                cols: [
                    { view: "grid", group: "grids", scrollY: "scrollVer" },
                    { resizer: true, width: 1 },
                    { view: "timeline", scrollX: "scrollHor", scrollY: "scrollVer" },
                    { view: "scrollbar", id: "scrollVer", group: "vertical" }
                ],
                //gravity: 2
            },
            { view: "scrollbar", id: "scrollHor" }
        ]
    };



    /**
     * Display vertical bar as a marker on today's date.
     */
    private addDateMarker() {
        gantt.plugins({
            marker: true
        });

        var currentDate: any;
        var id = gantt.addMarker({
            start_date: new Date(2020, 1, 10),
            css: "marker_line",
            text: "Marker"
        });

        var dragObject = {};
        var elem: HTMLInputElement;
        document.onmousedown = function (e ) {
            elem = (<HTMLInputElement> e.target).closest('.marker_line');
            if (e.which != 1 || !elem)
                return;
            //dragObject.elem =(<HTMLInputElement>elem);
        }

        document.onmousemove = function (e) {
            if (!elem) return;
            var position = e.clientX - gantt.config.grid_width + gantt.getScrollState().x;
            currentDate = gantt.dateFromPos(position);
        }

        document.onmouseup = function (e) {
            dragObject = {};
        }

        setInterval(function () {
            var today = gantt.getMarker(id);
            if (currentDate)
                today.start_date = currentDate;
            gantt.updateMarker(id);
        }, 10);
    }

    /**
     * Build Resource List
     */

    private resourceList() {

    //     var depts = [
    //         { key: 1, label: "Marking" },
    //         { key: 2, label: "Quality" },
    //         { key: 3, label: "CNC3X" },
    //         { key: 4, label: "CNC5X" },
    //     ];
    //    // var depts = this.resourceService.getDepartment();
    //   //  console.log(depts);
    //  //   gantt.serverList("departments",[depts]);
    //    gantt.serverList("departments",depts);
        
    //     var staffList =this.resourceService.staffList;

    //    var staffservicceList = this.resourceService.getStaff();
    //    console.log("==============staffList==============");
    //    console.dir(staffList);
    //    console.log("==============staffList from service==============");
    //    console.dir(staffservicceList);

//console.dir(this.resourceService.getStaff());

        //gantt.serverList("staff",[staffList]);
        //gantt.serverList("staff",staffList);

//Amey

Promise.all([this.resourceService.getDepartment()])
.then(([depts]) => {
    gantt.serverList("departments",depts);
});



Promise.all([this.resourceService.getStaff()])
.then(([staffList]) => {
    gantt.serverList("people",staffList);
});

//Amey





    }

    /**
     *  Workday and resource calendar
     */
    private calendarConfig() {
        var standardCal = gantt.addCalendar({
            worktime: {
                hours: [6, 24],
                days: [1, 1, 1, 1, 1, 1, 1]
            }
        }),

            qualityCal = gantt.addCalendar({
                worktime: {
                    hours: [8, 16],
                    days: [1, 1, 1, 1, 1, 1, 1]
                }
            });

        gantt.config.resource_property = "staff";
        gantt.config.resource_calendars = {
            5: standardCal,
            6: standardCal,
            7: standardCal,
            8: standardCal,
            9: standardCal,
            12: standardCal,
            13: standardCal,
            10: qualityCal,
            11: qualityCal
        };

        gantt.templates.timeline_cell_class = function (task, date) {
            if (!gantt.isWorkTime({ date: date, task: task }))
                return "week_end";
            return "";
        };

        gantt.templates.timeline_cell_class = function (task, date) {
            if (!gantt.isWorkTime(date, 'hour')) {
                return ("no_work_hour");
            }

            return "";
        };
    }

    /**
     * Lightbox/Dialog box to set task information.
     */
    private configLightBox() {

        gantt.locale.labels.section_owner = "Owner";
        gantt.config.lightbox.sections = [
            //Project Name
            { name: "description", height: 38, map_to: "text", type: "textarea", focus: true },
            // Task type: Project/Task
            { name: "type", type: "typeselect", map_to: "type" },
            // Duration config: Format : Date and time
            { name: "time", type: "duration", map_to: "auto", time_format: ["%d", "%m", "%Y", "%H:%i"] },
            // Resource : Map-To owner_id=> refered as id for task data format
            { name: "owner", height: 30, map_to: "owner_id", type: "select", options: gantt.serverList("people") },
        ];

       


        Promise.all([this.resourceService.getStaff()])
.then(([staffList]) => {
    gantt.updateCollection("people",staffList);
});
    }

    /**
     * Date and time scale.
     */
    private timelineScale() {
        gantt.config.auto_scheduling = true;
        gantt.config.auto_scheduling_strict = true;
        gantt.config.min_column_width = 20;
        gantt.config.row_height = 20;
        gantt.config.work_time = true;
        gantt.config.correct_work_time = true;
        gantt.setWorkTime({ hours: ["6:00-24:00"] });
        gantt.setWorkTime({ day: 6, hours: [6, 24] });

        gantt.config.scales = [
            { unit: "day", step: 1, format: "%j %D" },
            { unit: "hour", step: 1, format: "%H" }
        ];
    }

    /**
     * Zoom Level
     */
    private zoomLevels() {
        var zoomConfig = {
            levels: [
                [
                    { unit: "month", format: "%M %Y", step: 1 },
                    { unit: "day", format: "%d %M", step: 1 }
                ],
                [
                    { unit: "day", format: "%d %M", step: 1 },
                    { unit: "hour", format: "%H", step: 1 }
                ],
            ]
        }

        gantt.ext.zoom.init(zoomConfig);

    }

    /**
     * Duration configuration: Formats duration presentation
     */
    private durationConfig() {
        gantt.config.duration_unit = "hour";//an hour
        return gantt.ext.formatters.durationFormatter({
            // default values
            enter: "hour",
            store: "hour",
            format: ["day", "hour"],
            short: true,
            hoursPerDay: 18,
            daysPerYear: 365,
            labels: {
                hour: {
                    full: "hour",
                    plural: "hours",
                    short: "h"
                },
                day: {
                    full: "day",
                    plural: "days",
                    short: "d"
                },
                month: {
                    full: "month",
                    plural: "months",
                    short: "mon"
                },
                year: {
                    full: "year",
                    plural: "years",
                    short: "y"
                }
            }
        });
    }

    /**
     * Highlight weekend columns on Gantt.
     */
    private cssWorkOffColumns() {
        gantt.templates.timeline_cell_class = function (task: any, date: any) {
            if (!gantt.isWorkTime({ task: task, date: date })) {
                return "weekend";
            }
        }
    }

    /**
     * Highlight weekend header on on  time scale
     */
    private cssWorkOffColHeaders() {
        gantt.templates.scale_cell_class = function (date: { getDay: () => number; }) {
            if (date.getDay() == 0 || date.getDay() == 6) {
                return "weekend";
            }
        };
    }


    /**
     * Data processor.
     */
    private buildDP() {
        gantt.createDataProcessor({
            task: {
                update: (data: Task) => this.taskService.update(data),
                create: (data: Task) => this.taskService.insert(data),
                delete: (id: number) => this.taskService.remove(id)
            },
            link: {
                update: (data: Link) => this.linkService.update(data),
                create: (data: Link) => this.linkService.insert(data),
                delete: (id: number) => this.linkService.remove(id)
            },
        });
    }


    /**
     * Init
     */
    ngOnInit() {
        
        // Work Hous and Format of duration calculation
        this.durationConfig();
       
        this.configLightBox();
       // Config : Staff and resource data for Gantt view
        this.resourceList();
        this.resourceTaskSetting();

        // Add Marker
        gantt.plugins({ marker: true });
        this.addDateMarker();

        
        // Group by resources: Resource View plugin.
        gantt.plugins({ grouping: true });

        // Auto schedule: dependency management
        gantt.plugins({ auto_scheduling: true });

        //this.showOwnerTimeScale();
        this.timelineScale();

        this.zoomLevels();
        this.configGanttColums();
        this.cssWorkOffColHeaders();
        this.cssWorkOffColumns();
        this.calendarConfig();

        // On start hide Parent column : default view :Gantt
        gantt.getGridColumn("parent").hide = true;

        if (sessionStorage.getItem('role') === 'ROLE_USER')
        {
            gantt.config.readonly = true;
        }

        gantt.init(this.ganttContainer.nativeElement);

        const dp = this.buildDP();

        Promise.all([this.taskService.get(),
        this.linkService.get()])
            .then(([tasks, links]) => {
                gantt.parse({ tasks, links });
            });
            
    }

}