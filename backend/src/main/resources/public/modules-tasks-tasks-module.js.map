{"version":3,"sources":["webpack:///./src/app/models/rsourcerequest.model.ts","webpack:///./src/app/modules/tasks/tasks.module.ts","webpack:///./src/app/modules/tasks/update-task/update-task.component.css","webpack:///./src/app/modules/tasks/update-task/update-task.component.html","webpack:///./src/app/modules/tasks/update-task/update-task.component.ts"],"names":[],"mappings":"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","file":"modules-tasks-tasks-module.js","sourcesContent":["export class ResourceRequest{\r\n    group:string;\r\n    machine:string;\r\n    machineStatus:string;\r\n    reason:string;\r\n    comments:string;\r\n\r\n\r\n\r\n}","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { UpdateTaskComponent } from './update-task/update-task.component';\nimport { FormsModule } from '@angular/forms';\n\n\nexport const taskRoutes = [\n    { path:'update', component : UpdateTaskComponent }\n]\n\n@NgModule({\n    imports : [ CommonModule,FormsModule, RouterModule.forChild(taskRoutes)],\n    declarations : [UpdateTaskComponent]\n})\nexport class TaskModule{}","module.exports = \"table tr.highlight {\\r\\n    background-color: #18BC9C !important;\\r\\n    color: #ffffff;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy90YXNrcy91cGRhdGUtdGFzay91cGRhdGUtdGFzay5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksb0NBQW9DO0lBQ3BDLGNBQWM7QUFDbEIiLCJmaWxlIjoic3JjL2FwcC9tb2R1bGVzL3Rhc2tzL3VwZGF0ZS10YXNrL3VwZGF0ZS10YXNrLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0YWJsZSB0ci5oaWdobGlnaHQge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE4QkM5QyAhaW1wb3J0YW50O1xyXG4gICAgY29sb3I6ICNmZmZmZmY7XHJcbn0iXX0= */\"","module.exports = \"<br>\\n<form>\\n  <fieldset>\\n    <legend>Update Task\\n    </legend>\\n\\n    <div class=\\\"form-group\\\">\\n      <fieldset>\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"autoSchedule($event)\\\">\\n        <i class=\\\"fa fa-floppy-o\\\"></i>&nbsp;&nbsp;AutoResourceLoading</button>\\n    </fieldset>\\n\\n\\n    \\n      <fieldset>\\n      <button type=\\\"submit\\\" class=\\\"btn btn-danger btn-lg float-right\\\" (click)=\\\"cleanUpAll($event)\\\">\\n        <i class=\\\"fa fa-floppy-o\\\"></i>&nbsp;&nbsp;CleanUpAllData</button>\\n    </fieldset>\\n\\n          \\n      <label for=\\\"exampleSelect1\\\">Machine Group:</label>\\n      <!-- <select class=\\\"form-control\\\" id=\\\"machinegroupSelect\\\" [(ngModel)]=\\\"selectedGroup\\\" (change)= \\\"changeMachineGroup($event.target.value)\\\">\\n        <option>--Choose Machine group--</option>\\n        <option *ngFor=\\\"let depname of deparray\\\">{{depname.label}}</option>\\n      </select> -->\\n\\n      <select class=\\\"form-control\\\" name=\\\"depname\\\" [(ngModel)]=\\\"depname\\\"\\n        (change)=\\\"changeMachineGroup($event.target.value)\\\">\\n        <option>--Choose Machine group---</option>\\n        <option *ngFor=\\\"let depname of deparray\\\">{{depname.label}}</option>\\n      </select>\\n\\n\\n    </div>\\n\\n\\n    <div class=\\\"form-group\\\" *ngIf=\\\"depname != null\\\">\\n      <label for=\\\"exampleSelect1\\\">Machine</label>\\n      <select class=\\\"form-control\\\" name=\\\"selectedMachine\\\" [(ngModel)]=\\\"selectedMachine\\\"\\n        (change)=\\\"changeMachine($event.target.value)\\\"\\n        \\n         >\\n\\n        <option>-Choose Machine ---</option>\\n        <option *ngFor=\\\"let selectedMachine of machines\\\">{{selectedMachine.machineName}}</option>\\n      </select>\\n    </div>\\n\\n\\n    <ul class=\\\"nav nav-tabs\\\" *ngIf=\\\"selectedMachine != null\\\">\\n      <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link active\\\" data-toggle=\\\"tab\\\" href=\\\"#machineStatus\\\">Machine Status</a>\\n      </li>\\n      <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link\\\" data-toggle=\\\"tab\\\" href=\\\"#scheduledTask\\\" (click)=\\\"callTasks($event)\\\">Scheduled Tasks</a>\\n      </li>\\n      <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link\\\" data-toggle=\\\"tab\\\" href=\\\"#completedTask\\\" (click)=\\\"callTasks($event)\\\">Completed Tasks</a>\\n      </li>\\n    </ul>\\n    <div id=\\\"tabs\\\" class=\\\"tab-content\\\"><br>\\n      <div class=\\\"tab-pane fade show active\\\" id=\\\"machineStatus\\\">\\n        <br>\\n        <form>\\n          <fieldset>\\n            <div class=\\\"form-group\\\" *ngIf=\\\"flag\\\">\\n              <label for=\\\"exampleSelect1\\\">Current Status: {{machine.machineStatus}}</label>\\n\\n            </div>\\n            <div class=\\\"form-group\\\" *ngIf=\\\"flag\\\">\\n              <label for=\\\"exampleSelect1\\\">Change Status:</label>\\n              <select class=\\\"form-control\\\" name=\\\"machineStatus\\\" ngModel [value]=\\\"machineStatus\\\"\\n                (change)=\\\"changeMachineStatus($event.target.value)\\\">\\n                <option>--Change Status --</option>\\n                <option *ngFor=\\\"let machineStatus of machineDropDownHolder\\\">{{machineStatus}}</option>\\n              </select>\\n            </div>\\n            <div class=\\\"form-group\\\" *ngIf=\\\"currentMachineStatus == 'Hold'\\\">\\n              <label for=\\\"exampleSelect1\\\">Reason:</label>\\n              <select class=\\\"form-control\\\" id=\\\"exampleSelect1\\\">\\n                <option>Repairs</option>\\n                <option>Break Down</option>\\n              </select>\\n            </div>\\n            <!-- <div class=\\\"form-group row\\\">\\n              <label for=\\\"staticEmail\\\" class=\\\"col-sm-2 col-form-label\\\">Comments:</label>\\n              <div class=\\\"col-sm-10\\\">\\n                <input type=\\\"text\\\" readonly=\\\"\\\" \\n                class=\\\"form-control-plaintext\\\" id=\\\"staticEmail\\\" value=\\\"Power Failure at Machine\\\">\\n              </div>\\n            </div> -->\\n\\n\\n            <div class=\\\"form-group\\\" *ngIf=\\\"currentMachineStatus == 'Hold'\\\" >\\n              <label for=\\\"exampleTextarea\\\">Comments : </label>\\n              <textarea class=\\\"form-control\\\" id=\\\"exampleTextarea\\\" rows=\\\"3\\\"></textarea>\\n            </div>\\n\\n\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"submitGroupData($event)\\\">\\n              <i class=\\\"fa fa-floppy-o\\\"></i>&nbsp;&nbsp;Save</button>\\n          </fieldset>\\n        </form>\\n      </div>\\n      <div class=\\\"tab-pane fade\\\" id=\\\"scheduledTask\\\">\\n\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-md-8\\\">\\n            <table class=\\\"table table-hover\\\">\\n              <thead>\\n                <tr>\\n                  <th scope=\\\"col\\\">#</th>\\n                  <th scope=\\\"col\\\">Task Name</th>\\n                  <th scope=\\\"col\\\">Status</th>\\n                </tr>\\n              </thead>\\n              <tbody>\\n                <tr *ngFor=\\\"let selectedTask of alignedTask; \\\" class=\\\"table\\\" (click)=\\\"selectTask($event, selectedTask)\\\" \\n                  [ngClass] = \\\"{'highlight' : selectedTask.id == selectedId}\\\">\\n                  <th scope=\\\"row\\\" *ngIf=\\\"selectedTask.taskText != null && selectedTask.id != null\\\">{{selectedTask.id}}</th>\\n                  <td>{{selectedTask.taskText}}</td>\\n                  <td>{{selectedTask.status}}</td>\\n                </tr>\\n              </tbody>\\n            </table>\\n          </div> &nbsp;\\n          <div class=\\\"col-md-3\\\" *ngIf=\\\"selectedTask != null\\\">\\n            <div class=\\\"card border-primary mb-3\\\">\\n              <div class=\\\"card-header\\\">Project : X1</div>\\n              <div class=\\\"card-body\\\">\\n                <h4 class=\\\"card-title\\\">{{selectedTask.taskText}}</h4>\\n                <p class=\\\"card-text\\\">\\n                  Estimated Time :{{selectedTask.duration}} days.<br/>\\n                  Ref Doc : <a href=\\\"#\\\">link</a><br/>\\n                  Actual Start date:{{selectedTask.start_date}}<br/>\\n                  start time : {{selectedTask.startDateTime}}<br/>\\n                  completed hours : {{selectedTask.completedHours}}<br/>\\n                  Planner : Pradeep S.\\n                </p>\\n              </div>\\n            </div>\\n          </div>  \\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"comments\\\">Comments : </label>\\n          <textarea class=\\\"form-control\\\" id=\\\"comments\\\" rows=\\\"3\\\"></textarea>\\n        </div>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"startTask($event,selectedTask)\\\"><i class=\\\"fa fa-play\\\" ></i>&nbsp;Start</button>&nbsp;\\n        <button type=\\\"button\\\" class=\\\"btn btn-outline-primary btn-sm\\\" (click)=\\\"holdTask($event,selectedTask)\\\"><i\\n            class=\\\"fa fa-pause\\\"></i>&nbsp;Pause</button>&nbsp;\\n        <button type=\\\"button\\\" class=\\\"btn btn-success btn-sm\\\" (click)=\\\"finishTask($event,selectedTask)\\\"><i class=\\\"fa fa-check\\\"></i>&nbsp;Finish</button>\\n      </div>\\n      <div class=\\\"tab-pane fade\\\" id=\\\"completedTask\\\">\\n        <br />\\n        <div class=\\\"input-group\\\"> <span class=\\\"input-group-addon\\\">Filter :&nbsp;</span>\\n          <input id=\\\"filter\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Type Filter...\\\">\\n        </div><br />\\n        <table class=\\\"table table-hover\\\">\\n          <thead>\\n            <tr>\\n              <th scope=\\\"col\\\">Text</th>\\n              <th scope=\\\"col\\\">Type</th>\\n              <th scope=\\\"col\\\">Start Date</th>\\n              <th scope=\\\"col\\\">Progress</th>\\n            </tr>\\n          </thead>\\n          <tr *ngFor=\\\"let finish of finishedTask\\\">\\n            <th scope=\\\"row\\\">{{finish.text}}</th>\\n            <td>{{finish.type}}</td>\\n            <td>{{finish.start_date}}</td>\\n            <td>{{finish.duration}} %</td>\\n          </tr>\\n\\n          </tbody>\\n        </table>\\n      </div>\\n    </div>\\n    <!--<table class=\\\"table\\\">\\n  <tr>\\n    <td style=\\\"width: 60%\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"exampleSelect1\\\">Select Resource:</label>\\n        <select class=\\\"form-control\\\" id=\\\"exampleSelect1\\\">\\n          <option *ngFor=\\\"let resource of resources\\\" [value]=\\\"resource.resourceId\\\">{{resource.resourceName}}</option>\\n        </select>\\n      </div>  \\n    </td>\\n    <td rowspan=\\\"4\\\">\\n      <div class=\\\"card mb-3\\\">\\n        <div class=\\\"card-body\\\">\\n          <h5 class=\\\"card-title\\\">Task Details\\n            <span class=\\\"float-right\\\">\\n              <div class=\\\"custom-control custom-switch\\\">\\n                <input type=\\\"checkbox\\\" class=\\\"custom-control-input\\\" id=\\\"customSwitch2\\\">\\n                <label class=\\\"custom-control-label\\\" style=\\\"font-size: small;\\\"for=\\\"customSwitch2\\\">Hold the Job</label>\\n              </div>\\n            </span>\\n          </h5>\\n          <h6 class=\\\"card-subtitle text-muted\\\">Status : Planned</h6>\\n        </div>\\n        <ul class=\\\"list-group list-group-flush\\\">\\n          <li class=\\\"list-group-item\\\">Planned Start : 06-Jul-2020</li>\\n          <li class=\\\"list-group-item\\\">Estimated Duration : 56 hr</li>\\n          <li class=\\\"list-group-item\\\">Status : Planned</li>\\n          <li class=\\\"list-group-item\\\">Time Spent : 0 hrs</li>\\n        </ul>\\n        <!--<div class=\\\"card-body\\\">\\n          <a href=\\\"#\\\" class=\\\"card-link\\\">Card link</a>\\n          <a href=\\\"#\\\" class=\\\"card-link\\\">Another link</a>\\n        </div>\\n        <div class=\\\"card-footer text-muted\\\">\\n          2 days ago\\n        </div>\\n      </div>\\n      \\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"exampleSelect1\\\">Select Job/Task:</label>\\n        <select class=\\\"form-control\\\" id=\\\"exampleSelect1\\\">\\n          <option *ngFor=\\\"let task of tasks\\\" [value]=\\\"task.id\\\">{{task.text}}</option>\\n        </select>\\n      </div>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"exampleSelect1\\\">Select Machine Status:</label>\\n      <select class=\\\"form-control\\\" id=\\\"exampleSelect1\\\">\\n        <option *ngFor=\\\"let mcStatus of machineStatuses\\\" [value]=\\\"mcStatus.statusId\\\">{{mcStatus.statusName}}</option>\\n      </select>\\n      </div>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"exampleTextarea\\\">Notes : </label>\\n      <textarea class=\\\"form-control\\\" id=\\\"exampleTextarea\\\" rows=\\\"3\\\"></textarea>\\n      </div>\\n    </td>\\n  </tr>\\n  \\n</table>-->\\n  </fieldset>\\n</form>\"","import { Component, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { BasePage } from 'src/app/base.page';\nimport { TaskService } from 'src/app/services/task.service';\nimport { Resource } from 'src/app/models/resource.model';\nimport { Task } from 'src/app/models/task.model';\nimport { MachineStatus } from 'src/app/models/mcstatus.model';\nimport { Department } from 'src/app/models/department.model';\nimport { ResourceService } from 'src/app/services/resource.service';\nimport { Machine } from 'src/app/models/machine.model';\nimport { ResourceRequest } from 'src/app/models/rsourcerequest.model';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-update-task',\n  templateUrl: './update-task.component.html',\n  styleUrls: ['./update-task.component.css']\n})\nexport class UpdateTaskComponent extends BasePage implements OnInit {\n\n  resources: Resource[] = [];\n  tasks: Task[] = [];\n  alignedTask: Task[] = [];\n  deparray: Department[] = [];\n  depname: String;\n  machines: Array<any>;\n  machine: Machine;\n  flag: boolean = false;\n  selectedIndex: number;\n  public productDetails: object;\n  machineStatusHolder: string[] = [\"Available\", \"Hold\", \"Running\", \"Maintanance\"];\n  machineDropDownHolder: string[] = [];\n  currentMachineStatus: string;\n  resourceRequest: ResourceRequest = new ResourceRequest();\n  selectedTask: Task;\n  finishedTask: Task[] = [];\n  finish: Task;\n  selectedId: any;\n\n\n\n\n\n  constructor(private taskService: TaskService, private title: Title, private resourceService: ResourceService,\n    private router: Router,private authService:AuthService) {\n    super(title);\n    super.setTitle(\"Update Task\");\n  }\n\n  ngOnInit() {\n    this.taskService.getResources().subscribe(resources => {\n      this.resources = resources;\n    \n    });\n    this.taskService.getTasks().subscribe(tasks => {\n      this.tasks = tasks;\n        });\n  \n    this.resourceService.getDepartments().subscribe(\n      data => {\n        for (var val of data) {\n          this.deparray.push(val);\n        }\n      }\n    );\n    this.resetTasks;\n\n\n  }\n\n\nresetTasks()\n{\n  this.alignedTask = [];\n  this.finishedTask = [];\n}\n\n  changeMachineGroup(group) {\n    this.resetTasks;\n    this.machines = this.deparray.find(grp => grp.label == group).machineList;\n    this.resourceRequest.group = group;\n\n  }\n\n\n  changeMachine(selectedMachine) {\n    this.resetTasks;\n    this.machineDropDownHolder.splice(0, this.machineDropDownHolder.length);\n    this.flag = true;\n    this.machine = this.machines.find(machines => machines.machineName == selectedMachine);\n     //cleanup\n    this.machineStatusHolder.filter((m) => {\n     // if (m != this.machine.machineStatus) {\n        this.machineDropDownHolder.push(m);\n      //}\n    });\n    this.resourceRequest.machine = selectedMachine;\n   this. callTasks(selectedMachine);\n\n    \n\n  }\n\n  changeMachineStatus(machineStatus) {\n    this.currentMachineStatus = machineStatus;\n    this.resourceRequest.machineStatus = machineStatus;\n  }\n\n\n  submitGroupData(tt) {\n\n    this.resourceService.updateResourceGroup(this.resourceRequest);\n  }\n\n\n  callTasks(dummy) {\n   \n   this.resetTasks;\n    this.taskService.getAlignedTasks(this.resourceRequest).subscribe(tasks => {\n      this.alignedTask = tasks;\n      this.finishedTask = this.alignedTask.filter(f=>f.status == 'COMPLETED')\n      this.alignedTask = this.alignedTask.filter(f=>f.status !=='COMPLETED')\n     // \n    });\n  }\n\n  selectTask(event, row) {\n    this.selectedId = row.id;\n    this.selectedTask = row;\n  //  console.log(row);\n  }\n\n  startTask(event, selectedTask) {\n\n    this.taskService.startTask(selectedTask).subscribe(data => {\n      this.selectedTask = data;\n    });\n    \n  }\n\n  holdTask(event, selectedTask) {\n\n    this.taskService.holdTask(selectedTask).subscribe(data => {\n      this.selectedTask = data;\n    })\n  }\n\n  autoSchedule(event)\n  {\n    //alert(\"autoscheduling start\")\n    this.taskService.autoSchedule();\n  }\n\n  cleanUpAll(event)\n  {\n    alert(\"This will delete all data\")\n    this.taskService.cleanUp();\n    this.authService.logOut();\n     \n    \n    this.router.navigateByUrl('/login');\n    window.location.reload();\n\n    \n  }\n\n\n\n  finishTask(event, selectedTask) {\n    this.resetTasks;\n     this.taskService.finishTask(selectedTask).subscribe(data => {\n      //this.finish = data;\n      this.finishedTask = data;\n      this.alignedTask = this.alignedTask.filter(t => t.id !== selectedTask.id)\n\n    })\n\n\n   \n\n\n\n\n\n  }\n\n}\n"],"sourceRoot":""}